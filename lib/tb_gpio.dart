// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// TinkerBoard GPIO
class TBGpio {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TBGpio(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TBGpio.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int setup() {
    return _setup();
  }

  late final _setupPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('setup');
  late final _setup = _setupPtr.asFunction<int Function()>();

  int setup_gpio(
    int gpio,
    int direction,
    int pud,
  ) {
    return _setup_gpio(
      gpio,
      direction,
      pud,
    );
  }

  late final _setup_gpioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>('setup_gpio');
  late final _setup_gpio =
      _setup_gpioPtr.asFunction<int Function(int, int, int)>();

  int gpio_function(
    int gpio,
  ) {
    return _gpio_function(
      gpio,
    );
  }

  late final _gpio_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'gpio_function');
  late final _gpio_function = _gpio_functionPtr.asFunction<int Function(int)>();

  void output_gpio(
    int gpio,
    int value,
  ) {
    return _output_gpio(
      gpio,
      value,
    );
  }

  late final _output_gpioPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'output_gpio');
  late final _output_gpio =
      _output_gpioPtr.asFunction<void Function(int, int)>();

  int input_gpio(
    int gpio,
  ) {
    return _input_gpio(
      gpio,
    );
  }

  late final _input_gpioPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('input_gpio');
  late final _input_gpio = _input_gpioPtr.asFunction<int Function(int)>();

  void set_rising_event(
    int gpio,
    int enable,
  ) {
    return _set_rising_event(
      gpio,
      enable,
    );
  }

  late final _set_rising_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'set_rising_event');
  late final _set_rising_event =
      _set_rising_eventPtr.asFunction<void Function(int, int)>();

  void set_falling_event(
    int gpio,
    int enable,
  ) {
    return _set_falling_event(
      gpio,
      enable,
    );
  }

  late final _set_falling_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'set_falling_event');
  late final _set_falling_event =
      _set_falling_eventPtr.asFunction<void Function(int, int)>();

  void set_high_event(
    int gpio,
    int enable,
  ) {
    return _set_high_event(
      gpio,
      enable,
    );
  }

  late final _set_high_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'set_high_event');
  late final _set_high_event =
      _set_high_eventPtr.asFunction<void Function(int, int)>();

  void set_low_event(
    int gpio,
    int enable,
  ) {
    return _set_low_event(
      gpio,
      enable,
    );
  }

  late final _set_low_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'set_low_event');
  late final _set_low_event =
      _set_low_eventPtr.asFunction<void Function(int, int)>();

  int eventdetected(
    int gpio,
  ) {
    return _eventdetected(
      gpio,
    );
  }

  late final _eventdetectedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'eventdetected');
  late final _eventdetected = _eventdetectedPtr.asFunction<int Function(int)>();

  void cleanup() {
    return _cleanup();
  }

  late final _cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('cleanup');
  late final _cleanup = _cleanupPtr.asFunction<void Function()>();

  void hard_pwmWrite(
    int gpio,
    int value,
  ) {
    return _hard_pwmWrite(
      gpio,
      value,
    );
  }

  late final _hard_pwmWritePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'hard_pwmWrite');
  late final _hard_pwmWrite =
      _hard_pwmWritePtr.asFunction<void Function(int, int)>();

  void hard_pwmToneWrite(
    int gpio,
    int freq,
  ) {
    return _hard_pwmToneWrite(
      gpio,
      freq,
    );
  }

  late final _hard_pwmToneWritePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'hard_pwmToneWrite');
  late final _hard_pwmToneWrite =
      _hard_pwmToneWritePtr.asFunction<void Function(int, int)>();

  void hard_pwm_set_Frequency(
    int gpio,
    int divisor,
  ) {
    return _hard_pwm_set_Frequency(
      gpio,
      divisor,
    );
  }

  late final _hard_pwm_set_FrequencyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'hard_pwm_set_Frequency');
  late final _hard_pwm_set_Frequency =
      _hard_pwm_set_FrequencyPtr.asFunction<void Function(int, int)>();

  void hard_pwm_set_Period(
    int gpio,
    int period,
  ) {
    return _hard_pwm_set_Period(
      gpio,
      period,
    );
  }

  late final _hard_pwm_set_PeriodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Uint32)>>(
          'hard_pwm_set_Period');
  late final _hard_pwm_set_Period =
      _hard_pwm_set_PeriodPtr.asFunction<void Function(int, int)>();

  void gpio_set_drive(
    int gpio,
    int drv_type,
  ) {
    return _gpio_set_drive(
      gpio,
      drv_type,
    );
  }

  late final _gpio_set_drivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'gpio_set_drive');
  late final _gpio_set_drive =
      _gpio_set_drivePtr.asFunction<void Function(int, int)>();

  int gpio_get_drive(
    int gpio,
  ) {
    return _gpio_get_drive(
      gpio,
    );
  }

  late final _gpio_get_drivePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'gpio_get_drive');
  late final _gpio_get_drive =
      _gpio_get_drivePtr.asFunction<int Function(int)>();
}

const int SETUP_OK = 0;

const int SETUP_DEVMEM_FAIL = 1;

const int SETUP_MALLOC_FAIL = 2;

const int SETUP_MMAP_FAIL = 3;

const int INPUT = 0;

const int OUTPUT = 1;

const int PWM_OUTPUT = 2;

const int GPIO_CLOCK = 3;

const int SOFT_PWM_OUTPUT = 4;

const int SOFT_TONE_OUTPUT = 5;

const int PWM_TONE_OUTPUT = 6;

const int LOW = 0;

const int HIGH = 1;

const int PUD_OFF = 0;

const int PUD_DOWN = 1;

const int PUD_UP = 2;

const int E_2MA = 0;

const int E_4MA = 1;

const int E_8MA = 2;

const int E_12MA = 3;
